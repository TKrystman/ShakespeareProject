import random
import numpy as np
import tensorflow as tf




# to create the neural network
from keras.models import Sequential

# layers for the neural network: LSTM is memory, Dense for hidden, and Activation for output
from keras.layers import LSTM, Dense, Activation

# Optimiser
from keras.optimizers import RMSprop

#Using tensorflow to load files through a link rather than from local
filepath = tf.keras.utils.get_file('shakespeare.txt', 'https://storage.googleapis.com/download.tensorflow.org/data/shakespeare.txt')

text = open(filepath, 'rb').read().decode(encoding='utf-8').lower()

#converting scentences into a neumerical format

# training on part of the text
text = text[300000:800000]

#character set, set function filters out all unique characters then sorted sorts them
characters = sorted(set(text))

#emumerate assignes a number for each character in a set
char_to_index = dict((c,i) for i, c in enumerate(characters))

# same as prev but the other way round
index_to_char = dict((i,c) for i, c in enumerate(characters))

#sequence length means we are going to use 40 chars to predict the next char
SEQ_LENGTH = 40
#how many characters are we going to switch to the next scentence.
STEP_SIZE = 3


#scan a scentence and resault will be following character
scentences = []
next_characters = []


'''
for i in range(0, len(text)- SEQ_LENGTH, STEP_SIZE):
    scentences.append(text[i: i+SEQ_LENGTH])
    next_characters.append(text[i+SEQ_LENGTH])
    
#convert data created into numpy arrays

#one dimension for all possible scentences, one dimension for all individial positions in the scentences, one last dimension for all possible characters
#whenever in a specific scentence at a specific position a certian character occurs we will set bool to true or 1 
#pass as a tuple which is like a list in python that are immutible meaning they cannot be changed once they are created
x =np.zeros((len(scentences), SEQ_LENGTH, len(characters)), dtype=np.bool_)
y =np.zeros((len(scentences), len(characters)), dtype= np.bool_)

#for each scentence enumerate every chatacter in those scentences so that it can be set to 1 if it appears in the right place when we train our ai
for i, sentence in enumerate(scentences):
    for t, character in enumerate(sentence):
        x[i, t, char_to_index[character]] = 1
        
    y[i, char_to_index[next_characters[i]]] = 1
    '''
    
    
    
#Building the neural network


#for training the model

#model = Sequential()

#layer 1
#128 neurons
#model.add(LSTM(128,input_shape=(SEQ_LENGTH, len(characters))))


#layer 2
#has as many neurons as possible characters
#model.add(Dense(len(characters)))

#activation layer 
# softmax function scales output so that all values add up to 1
#model.add(Activation('softmax'))

#lr is learning rate
#model.compile(loss='categorical_crossentropy', optimizer=RMSprop(lr=0.01))

#batch size is how many examples that will go into the network at once 
#epochs is how many times the network will see the same data over again
#model.fit(x,y, batch_size=256, epochs=4)


#model.save('textgenerator.model')



#loads up the model
model = tf.keras.models.load_model('textgenerator.model')

#helper function: takes prediction of model and takes one character depending on temp the choice will be conservative or experimental
def sample(preds, temperature=1.0):
    preds = np.asarray(preds).astype('float64')
    preds = np.log(preds) / temperature
    exp_preds = np.exp(preds)
    preds = exp_preds / np.sum(exp_preds)
    probas = np.random.multinomial(1, preds, 1)
    return  np.argmax(probas)
    
    #text generation function
    #we are using first 40 chars from shakespear text then the rest is generated by the neural network
def generate_text(length, temperature):
    start_index = random.randint(0, len(text) - SEQ_LENGTH - 1)
    generated = ''
    sentence = text[start_index: start_index + SEQ_LENGTH]
    generated += sentence
    for i in range(length):
        x_predictions = np.zeros((1, SEQ_LENGTH, len(characters)))
        for t, char in enumerate(sentence):
            x_predictions[0, t, char_to_index[char]] = 1

        predictions = model.predict(x_predictions, verbose=0)[0]
        next_index = sample(predictions, temperature)
        next_character = index_to_char[next_index]

        generated += next_character
        sentence = sentence[1:] + next_character
    return generated
        
print('-------0.2-------')
print(generate_text(300, 0.2))
print('-------0.4-------')
print(generate_text(300, 0.4))
print('-------0.6-------')
print(generate_text(300, 0.6))
print('-------0.8-------')
print(generate_text(300, 0.8))
print('-------1-------')
print(generate_text(300, 1.0))
